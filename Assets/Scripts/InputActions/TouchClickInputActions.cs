//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputActions/TouchClickInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchClickInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchClickInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchClickInputActions"",
    ""maps"": [
        {
            ""name"": ""TouchClick"",
            ""id"": ""fd8e403b-95df-4f14-8647-5e1e550605e2"",
            ""actions"": [
                {
                    ""name"": ""TapContact"",
                    ""type"": ""Button"",
                    ""id"": ""425bd411-257d-4814-9a0c-b6a1f2cb4f1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bac1a084-e27c-404c-b639-ca0bf4aa65fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2589fa5d-deca-4a14-bd69-40dad1e0098b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dff3e55c-bc06-4e28-9b78-762d3eead821"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e769278e-aff2-44ef-a343-90f8b7389517"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23d62ba6-a3a7-4cb8-9d32-53feb30d8c2a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchClick
        m_TouchClick = asset.FindActionMap("TouchClick", throwIfNotFound: true);
        m_TouchClick_TapContact = m_TouchClick.FindAction("TapContact", throwIfNotFound: true);
        m_TouchClick_TapPosition = m_TouchClick.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchClick
    private readonly InputActionMap m_TouchClick;
    private List<ITouchClickActions> m_TouchClickActionsCallbackInterfaces = new List<ITouchClickActions>();
    private readonly InputAction m_TouchClick_TapContact;
    private readonly InputAction m_TouchClick_TapPosition;
    public struct TouchClickActions
    {
        private @TouchClickInputActions m_Wrapper;
        public TouchClickActions(@TouchClickInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapContact => m_Wrapper.m_TouchClick_TapContact;
        public InputAction @TapPosition => m_Wrapper.m_TouchClick_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchClick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchClickActions set) { return set.Get(); }
        public void AddCallbacks(ITouchClickActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchClickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchClickActionsCallbackInterfaces.Add(instance);
            @TapContact.started += instance.OnTapContact;
            @TapContact.performed += instance.OnTapContact;
            @TapContact.canceled += instance.OnTapContact;
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
        }

        private void UnregisterCallbacks(ITouchClickActions instance)
        {
            @TapContact.started -= instance.OnTapContact;
            @TapContact.performed -= instance.OnTapContact;
            @TapContact.canceled -= instance.OnTapContact;
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
        }

        public void RemoveCallbacks(ITouchClickActions instance)
        {
            if (m_Wrapper.m_TouchClickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchClickActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchClickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchClickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchClickActions @TouchClick => new TouchClickActions(this);
    public interface ITouchClickActions
    {
        void OnTapContact(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
